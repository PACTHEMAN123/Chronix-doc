#import "../template.typ": img, tbl

= 总结与展望

== 工作总结

+ #strong[测例通过方面]：我们通过了除部分LTP测试之外的所有测试点，在排行榜上位于前列。

+ #strong[文件系统与存储管理]：接入并优化了 *lwext4* 文件系统，在其官方 Rust 实现的基础上扩展了链接、挂载等功能，使其更符合实际应用需求。重构了 *虚拟文件系统（VFS）*，使其支持多种文件系统类型，并实现了 *tmpfs、procfs、devfs* 等关键文件系统。引入 *页缓存机制*，显著提升了文件读写的性能。新增了与文件系统相关的系统调用，完善了用户态对文件操作的访问能力。  

+ #strong[进程与信号机制]：实现了标准的 *进程管理机制*，支持进程创建、销毁、调度等核心功能。按照 Linux 标准实现了 *信号处理机制*，支持标准信号和实时信号的正确传递与处理。通过内核空间动态映射，优化了 *ELF 文件加载*，支持 *动态链接*，提升了程序的加载效率。 实现了 *futex 机制* 和 *共享内存*，增强了进程间同步与通信能力。完善了 *IPC（进程间通信）* 机制，支持多种通信方式。  

+ #strong[内存管理]：实现了高效的 *slab 分配器*，优化了内核对象的内存分配性能。改进了 *用户态指针* 的支持，确保用户程序能够安全访问内存。优化了 *零页分配* 机制，减少内存初始化开销。  

+ #strong[调度与多核支持]：引入了 *异步调度与无栈协程*，提升了任务调度的灵活性。统一了 *线程/进程模型*，简化了任务管理逻辑。实现了 *多核心调度*，并采用 *负载均衡算法*，充分利用多核 CPU 的计算能力。

+ #strong[网络支持]：适配 *smoltcp* 网络协议栈，支持基本的网络通信功能。增加了对 *VirtIO net* 设备的支持，使系统能够在虚拟化环境中高效运行网络功能。  

+ #strong[硬件抽象与平台适配]：设计了 *硬件抽象层（HAL）*，使内核能够适配不同架构，并重点支持了 *龙芯架构*。实现了 *两个平台的中断控制器*，确保系统能够正确处理硬件中断。
 
通过团队协作，我们成功构建了一个功能完善、性能优化的操作系统内核，涵盖了文件系统、进程管理、内存管理、调度算法、网络通信等多个核心模块，并适配了多种硬件架构。未来，我们将继续优化系统性能，增强稳定性和安全性，以支持更广泛的应用场景。


== 经验总结

+ 需要学会熟练使用 GDB 等调试工具。能够通过设置断点、查看寄存器和反汇编等手段深入分析问题。同时要善于结合QEMU等虚拟化环境进行内核级调试。

+ 通过系统调用与源代码相互对比的方式调试/适配测例。

+ 仔细阅读 Linux Syscall Manual，注意 NOTES VERSION 等部分。

+ 通过最小可复现代码查找问题。

+ 在开发早期就要注重代码的健壮性，合理使用assert和panic等机制快速暴露问题，对未实现功能进行明确标记。

+ 面对历史遗留代码时，必须保持清晰的注释和文档记录，确保代码的可维护性。性能优化应当建立在功能正确性的基础上，通过性能分析工具定位热点后再进行针对性改进。

+ 团队协作中要建立规范的代码审查机制和知识共享平台，我们使用了github的wiki来共享我们的设计思路，便于合作。通过自动化测试持续保证代码质量。

+ 整个开发过程需要具备耐心和细致的工作态度，在保证系统稳定性的前提下逐步完善功能。

== 项目意义

- #strong[技术成长]：我们通过亲手实现每个核心组件，真正理解了从CPU指令到系统调用的完整执行路径，学会了在资源受限环境下做出工程权衡，这种能力在应用开发中同样宝贵。同时提高了 rust 的实战能力。
- #strong[现实意义]：验证了Rust语言在操作系统开发中的可行性，为其他Rust系统项目提供了参考；为开源社区贡献可复用的解决方案；内核代码大部分具有详细注释，适合初学者阅读学习。

== 未来计划

+ 支持 RISC-V 以及龙芯开发板

+ 优化文件系统读写、路径查找的性能，可能采用纯 rust 实现的 ext4 文件系统，使得 IO 可以利用上 rust 的异步特性。增加页缓存的水位机制，LRU 的回收。支持预读和延迟写入策略

+ 支持常见网络应用：基础HTTP服务器、SSH远程访问等。

+ 运行现实应用：如数据库系统(如SQLite)支持。

+ 继续适配 LTP 测例，同时使用 LTP 增加系统的健壮性。

+ 图形化界面

+ 尝试应用读写锁、增加更多的锁

+ 完善系统调用的错误识别与处理
